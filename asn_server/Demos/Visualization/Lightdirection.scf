%% -----------------------------------------------------------------------
%%
%% Copyright (c) <2011> <University of Paderborn>
%% Permission is hereby granted, free of charge, to any person
%% obtaining a copy of this software and associated documentation
%% files (the "Software"), to deal in the Software without restriction,
%% including without limitation the rights to use, copy, modify and
%% merge the Software, subject to the following conditions:
%%
%% 1.) The Software is used for non-commercial research and
%%     education purposes.
%%
%% 2.) The above copyright notice and this permission notice shall be
%%     included in all copies or substantial portions of the Software.
%%
%% 3.) Publication, Distribution, Sublicensing, and/or Selling of
%%     copies or parts of the Software requires special agreements
%%     with the University of Paderborn and is in general not permitted.
%%
%% 4.) Modifications or contributions to the software must be
%%     published under this license. The University of Paderborn
%%     is granted the non-exclusive right to publish modifications
%%     or contributions in future versions of the Software free of charge.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
%% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
%% OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
%% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
%% HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
%% WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
%% FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
%% OTHER DEALINGS IN THE SOFTWARE.
%%
%% Persons using the Software are encouraged to notify the
%% Department of Communications Engineering at the University of Paderborn
%% about bugs via <spark@nt.uni-paderborn.de>. Please reference Spark
%% in your publications if it was used for them.
%%
%% -----------------------------------------------------------------------

[MACRO]
  NTBBX: ntbb3
  SAMPLERATE: 16000
  CHANNELSSOUNDCARD:   6
  CHANNELS:   16
  FRAMESIZE:  128
  XMLPATH_FILE: { <str=extractfilepath(CONFIGURATION_FILE)+"Config.xml"> }
	BEAM_OUT_AUDIO_S:	512
	BEAM_OUT_META_S:	 16
	BEAM_OUT_META_VAD:	512

  FFTSIZE:    1024
  FFTHALV:    <eval=(FFTSIZE/2)>
  FDSIZE:     <eval=(FFTSIZE+2)>
  FDSIZE2:    <eval=(FDSIZE+2)/2>
  MAXBIN:     <eval=FFTSIZE/2+1>
  DD_SMOOTH:    0.92
  NOISE_SMOOTH: 0.6
  HISTLENGTH:   500
  
  DOA_FRAMESIZE:             1024
  DOA_N_MICS:                2
  DOA_N_TDOAMATRIX_ELEMENTS: <eval=DOA_N_MICS*DOA_N_MICS>
  DOA_FASTTDOA_OUTPUTSIZE:   <eval=DOA_FRAMESIZE*DOA_N_TDOAMATRIX_ELEMENTS>
  DOA_SAMPLERATE:          16000.0
  DOA_WAVEPROPAGATIONSPEED:  343.0
  DOA_MICSPACING:            0.048
  FILTERLENGTH: 2048
  
  SRPFRAMEFACTOR: 16
  ANGLESPERTWOPI: 8
  SRPPHATFFTSIZE: 8192
  
[/MACRO]

[TASK]
  [KERNEL]
    TaskType:   Realtime 
    Scheduler: MultiCore
    FloatingPointHandlerReg: On
  [/KERNEL]
  [INPUT]
    Client: { Nix }
  [/INPUT]
  [OUTPUT]
    Lightdirection: ..
    imagesc: ..
  [/OUTPUT]
  [LOGGER]
    SPARK: { FileLogger, WARN }
    DEFAULT: { DefaultLogger, WARN }
    Read1: { DefaultLogger, WARN }
  [/LOGGER]  
 
  [MODULES]
    
    [M]
      Name:  Client
      Type:  basic/RemoteLinkClient
      FrameSizes: { <eval=4*CHANNELSSOUNDCARD*FRAMESIZE> }
      ServerIP: "10.0.1.2"
      Port: 8000
    [/M]
    
    [M]   
      Name:      AudioSplitter
      Type:      basic/Router2      
      FrameSize: <eval=FRAMESIZE>
      InputChannels:  { <eval=CHANNELSSOUNDCARD> }
      OutputChannels: { 1, 2}
      Mapping:        { 0, 0, 3 }
    [/M]
    
    [M]   
      Name:      ReFrame
      Type:      basic/Reframing      
      InFrameSize: <eval=FRAMESIZE*4>
      OutFrameSize: { <eval=FFTSIZE*4> }
    [/M]
    
  
       
    [M]
      Name:      ShortTimeFourierTransformNoise
      Type:      basic/STFT
      FrameSize: <eval=FFTSIZE>
      FFTSize:   <eval=FFTSIZE>
      Window:    HANN
    [/M]    
    [M]
      Name:            NoisePower
      Type:            basic/Math
      InputFrameSize:  <eval=FDSIZE>
      OutputFrameSize: <eval=FDSIZE/2>
      ProcessData:     "out0=abs(complex(in0))^2;"
    [/M] 
    [M]
      Name:            FlipFrequ
      Type:            basic/Router2
      FrameSize:       1
      InputChannels:   { <eval=FDSIZE/2> }
      OutputChannels:  { <eval=FDSIZE/2> }
      Mapping:         <eval=FFTHALV:-1:0>
    [/M] 
    [M]
      Name:            NoisePowerSmooth
      Type:            basic/Butter
      FrameSize:       1
      Channels:        <eval=FDSIZE/2>
      Order:           1
      Cutoff:          <eval=1-NOISE_SMOOTH>
    [/M]  
    [M]
      Name:            Log
      Type:            basic/Math
      InputFrameSize:  <eval=FDSIZE/2>
      OutputFrameSize: <eval=FDSIZE/2>
      ProcessData:     "out0=log(in0);"
    [/M]   
    [M]
      Name: Hist
      Type: gtkplot2/History
      OutputFrameSize: <eval=HISTLENGTH*FDSIZE/2>
      InputFrameSize:  <eval=FDSIZE/2>
      Channels: 1
    [/M]
    [M]
      Name:            Transpose
      Type:            basic/Math
      InputFrameSize:  <eval=HISTLENGTH*FDSIZE/2>
      OutputFrameSize: <eval=HISTLENGTH*FDSIZE/2>
      ProcessData:     <str="out0=reshape(in0, 513, " + HISTLENGTH + ")';">
    [/M]     
    [M]
      Name: imagesc
      Type: gtkplot2/ScaledImage
      Width: <eval=HISTLENGTH>
      Height: <eval=FDSIZE/2>
      ColormapResolution: 128
      %%CloseAtTheEnd:    false
      Queue:              DISCARD
    [/M]
    
     
    [M]
      Name:            Lightdirection
      Type:            networksoundcard/lightdirection
      Angles: 1
      FrameSize: { <eval=FRAMESIZE*CHANNELSSOUNDCARD*SRPFRAMEFACTOR> }
    [/M]
    
    
      [M]   
      Name:      ReFrameSRP
      Type:      basic/Reframing      
      InFrameSize: <eval=FRAMESIZE*CHANNELSSOUNDCARD*4>
      OutFrameSize: { <eval=FRAMESIZE*4*CHANNELSSOUNDCARD*SRPFRAMEFACTOR> }
      [/M]
      
      [M]
      Name: SRP
      Type: asn/SRPPhat
      Channels: <eval=CHANNELSSOUNDCARD>
      FrameSize: { <eval=FRAMESIZE*SRPFRAMEFACTOR> }
      FFTSize: { <eval=SRPPHATFFTSIZE> } 
      NumAngles: { <eval=ANGLESPERTWOPI> } 
      MicPos: { 0.025, 0, 0.0125, 0.021651, -0.0125, 0.021651, -0.025,  0, -0.0125, -0.021651, 0.0125, -0.021651 }
      [/M]  
    
    
  [/MODULES]

  [CONNECTIONS]

    Client[0] ->	AudioSplitter[0]
    AudioSplitter[0] -> ReFrame[0]
    ReFrame[0] -> ShortTimeFourierTransformNoise -> NoisePower -> FlipFrequ 
    FlipFrequ -> NoisePowerSmooth -> Log -> Hist -> Transpose -> imagesc
    
    
    Client[0] ->	ReFrameSRP[0] 
    ReFrameSRP[0] -> SRP[0]
    SRP[AnglesOutRad] ->  Lightdirection[Angles]
    ReFrameSRP[0] -> Lightdirection[AudioSignal]

  [/CONNECTIONS]

[/TASK]
